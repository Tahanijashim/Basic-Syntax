Problem,Syntax
SELECT and FROM,
1. Retrieve all columns from the employees table.,SELECT * FROM employees;
2. Retrieve only the name and age columns from the customers table.,"SELECT name, age FROM customers;"
3. Get distinct city values from the customers table.,SELECT DISTINCT city FROM customers;
4. Retrieve the first 5 rows from the products table.,SELECT TOP 5 * FROM products;
WHERE Clause,
"5. Find all employees whose salary is greater than 50,000.",SELECT * FROM employees WHERE salary > 50000;
"6. Get customers from the customers table who live in ""New York"".",SELECT * FROM customers WHERE city = 'New York';
"7. Find all orders placed after January 1, 2023.",SELECT * FROM orders WHERE order_date > '2023-01-01';
"8. Retrieve employees who have the job title ""Manager"".",SELECT * FROM employees WHERE job_title = 'Manager';
9. Find products where the price is between 100 and 500.,
"10. Get all customers whose names start with ""A"".",SELECT * FROM products WHERE price BETWEEN 100 AND 500;
ORDER BY Clause,
11. Retrieve employees ordered by salary in descending order.,SELECT * FROM employees ORDER BY salary DESC;
12. Retrieve customers sorted by their last name alphabetically.,SELECT * FROM customers ORDER BY last_name ASC;
13. Retrieve products sorted by price in ascending order.,SELECT * FROM products ORDER BY price ASC;
LIMIT and OFFSET,
14. Retrieve the top 3 highest-paid employees.,SELECT * FROM employees ORDER BY salary DESC LIMIT 3;
15. Get the second-highest paid employee (use LIMIT and OFFSET).,SELECT * FROM employees ORDER BY salary DESC LIMIT 1 OFFSET 1;
Aggregate Functions,
16. Count the total number of employees.,SELECT COUNT(*) AS total_employees FROM employees;
17. Find the average price of products.,SELECT AVG(price) AS average_price FROM products;
18. Get the highest salary from the employees table.,SELECT MAX(salary) AS highest_salary FROM employees;
19. Find the lowest product price in the products table.,SELECT MIN(price) AS lowest_price FROM products;
20. Calculate the total revenue from the orders table.,SELECT SUM(total_amount) AS total_revenue FROM orders;
GROUP BY and HAVING,
21. Get the number of employees in each department.,"SELECT department_id, COUNT(*) AS num_employees 
FROM employees 
GROUP BY department_id;"
22. Find the total sales for each customer.,"SELECT customer_id, SUM(total_amount) AS total_sales 
FROM orders 
GROUP BY customer_id;"
23. Find the average salary for each job title.,"SELECT job_title, AVG(salary) AS average_salary 
FROM employees 
GROUP BY job_title;
"
24. Find the department with the highest number of employees.,"SELECT department_id 
FROM employees 
GROUP BY department_id 
ORDER BY COUNT(*) DESC 
LIMIT 1;
"
25. Retrieve customers who have placed more than 5 orders.,"SELECT customer_id, COUNT(*) AS num_orders 
FROM orders 
GROUP BY customer_id 
HAVING COUNT(*) > 5;
"
JOINS,
26. Retrieve employees and their corresponding department names.,"SELECT e.employee_id, e.name AS employee_name, d.department_name
FROM employees e
JOIN departments d ON e.department_id = d.department_id;
"
27. Get a list of all orders with customer names.,"SELECT o.order_id, c.name AS customer_name, o.order_date
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id;
"
28. Retrieve product names and their corresponding order details.,"SELECT p.product_name, od.order_id, od.quantity
FROM products p
JOIN order_details od ON p.product_id = od.product_id;
"
29. List all employees along with their managers' names.,"SELECT e.employee_id, e.name AS employee_name, m.name AS manager_name
FROM employees e
LEFT JOIN employees m ON e.manager_id = m.employee_id;
"
30. Find employees who do not belong to any department.,"SELECT * FROM employees 
WHERE department_id IS NULL;
"
"INNER JOIN, LEFT JOIN, RIGHT JOIN",
31. Get all customers who have placed an order (INNER JOIN).,"SELECT c.customer_id, c.name 
FROM customers c
INNER JOIN orders o ON c.customer_id = o.customer_id;
"
32. List all employees and their assigned projects (LEFT JOIN).,"SELECT e.employee_id, e.name AS employee_name, p.project_name
FROM employees e
LEFT JOIN projects p ON e.employee_id = p.employee_id;
"
"33. Retrieve all customers and their orders, even if they haven't placed one (RIGHT JOIN).","SELECT c.customer_id, c.name AS customer_name, o.order_id
FROM customers c
RIGHT JOIN orders o ON c.customer_id = o.customer_id;
"
34. Find employees without a manager (LEFT JOIN with NULL).,"SELECT e.employee_id, e.name AS employee_name
FROM employees e
LEFT JOIN employees m ON e.manager_id = m.employee_id
WHERE m.employee_id IS NULL;
"
35. Find orders without a corresponding product entry (RIGHT JOIN with NULL).,"SELECT o.order_id
FROM orders o
RIGHT JOIN order_details od ON o.order_id = od.order_id
WHERE od.product_id IS NULL;
"
Subqueries,
36. Get employees whose salary is above the average salary.,"SELECT employee_id, name, salary
FROM employees
WHERE salary > (SELECT AVG(salary) FROM employees);
"
37. Retrieve products that have never been ordered.,"SELECT p.product_id, p.product_name
FROM products p
WHERE p.product_id NOT IN (SELECT DISTINCT product_id FROM order_details);
"
38. Find customers who placed orders in the last 30 days.,"SELECT c.customer_id, c.name
FROM customers c
WHERE c.customer_id IN (SELECT o.customer_id FROM orders o WHERE o.order_date > CURDATE() - INTERVAL 30 DAY);
"
39. Find employees who earn more than their department's average salary.,"SELECT e.employee_id, e.name, e.salary
FROM employees e
WHERE e.salary > (
    SELECT AVG(salary)
    FROM employees
    WHERE department_id = e.department_id
);
"
40. Retrieve customers who ordered the most expensive product.,"SELECT c.customer_id, c.name
FROM customers c
WHERE c.customer_id IN (
    SELECT o.customer_id
    FROM orders o
    JOIN order_details od ON o.order_id = od.order_id
    JOIN products p ON od.product_id = p.product_id
    WHERE p.price = (SELECT MAX(price) FROM products)
);
"
Self JOIN,
41. Find pairs of employees who work in the same department.,"SELECT e1.employee_id AS employee_1_id, e1.name AS employee_1_name, e2.employee_id AS employee_2_id, e2.name AS employee_2_name
FROM employees e1
JOIN employees e2 ON e1.department_id = e2.department_id AND e1.employee_id < e2.employee_id;
"
42. Retrieve employees and their direct managers from the same table.,"SELECT e.employee_id, e.name AS employee_name, m.name AS manager_name
FROM employees e
LEFT JOIN employees m ON e.manager_id = m.employee_id;
"
43. Find customers who referred other customers.,"SELECT c1.customer_id, c1.name AS referring_customer
FROM customers c1
WHERE c1.customer_id IN (SELECT c2.referral_id FROM customers c2 WHERE c2.referral_id IS NOT NULL);
"
44. Find products that belong to the same category.,"SELECT p1.product_id, p1.product_name
FROM products p1
JOIN products p2 ON p1.category_id = p2.category_id
WHERE p1.product_id != p2.product_id;"
45. Get employees who have the same salary as someone else.,"SELECT e1.employee_id, e1.name, e1.salary
FROM employees e1
JOIN employees e2 ON e1.salary = e2.salary AND e1.employee_id != e2.employee_id;"
CASE and Conditional Statements,
"46. Classify employees into salary ranges (""Low"", ""Medium"", ""High"").","SELECT employee_id, name,
       CASE
           WHEN salary < 30000 THEN 'Low'
           WHEN salary BETWEEN 30000 AND 70000 THEN 'Medium'
           WHEN salary > 70000 THEN 'High'
       END AS salary_range
FROM employees;"
"47. Display ""Active"" or ""Inactive"" based on the last login date of users.","SELECT user_id, name,
       CASE
           WHEN last_login >= CURDATE() - INTERVAL 30 DAY THEN 'Active'
           ELSE 'Inactive'
       END AS user_status
FROM users;"
48. Assign product categories based on price ranges.,"SELECT product_id, product_name, price,
       CASE
           WHEN price < 50 THEN 'Cheap'
           WHEN price BETWEEN 50 AND 200 THEN 'Affordable'
           WHEN price > 200 THEN 'Expensive'
       END AS price_category
FROM products;"
"49. Show ""Pass"" or ""Fail"" for student grades.","SELECT student_id, name, grade,
       CASE
           WHEN grade >= 60 THEN 'Pass'
           ELSE 'Fail'
       END AS result
FROM students;"
"50. Return ""High Value"" for customers who spent over $5000.","SELECT customer_id, SUM(total_amount) AS total_spent,
       CASE
           WHEN SUM(total_amount) > 5000 THEN 'High Value'
           ELSE 'Regular'
       END AS customer_value
FROM orders
GROUP BY customer_id;"
String Functions,
51. Get the first three characters of all product names.,"SELECT product_name, SUBSTRING(product_name, 1, 3) AS first_three_chars
FROM products;"
52. Convert all employee names to uppercase.,"SELECT employee_id, UPPER(name) AS uppercase_name
FROM employees;"
53. Remove spaces from the beginning and end of customer names.,"SELECT customer_id, TRIM(name) AS trimmed_name
FROM customers;"
54. Concatenate first and last names of employees.,"SELECT employee_id, CONCAT(first_name, ' ', last_name) AS full_name
FROM employees;"
"55. Replace ""New York"" with ""NY"" in the address column.","SELECT customer_id, REPLACE(address, 'New York', 'NY') AS updated_address
FROM customers;"
Date Functions,
56. Get the current date.,SELECT CURDATE() AS current_date;
57. Find customers who signed up in the last 6 months.,"SELECT customer_id, name
FROM customers
WHERE signup_date >= CURDATE() - INTERVAL 6 MONTH;"
58. Extract the year from the order_date column.,"SELECT order_id, YEAR(order_date) AS order_year
FROM orders;"
59. Calculate the age of employees based on their birth date.,"SELECT employee_id, name, 
       FLOOR(DATEDIFF(CURDATE(), birth_date) / 365) AS age
FROM employees;"
60. Get the name of the weekday for each order date.,"SELECT order_id, order_date, DAYNAME(order_date) AS weekday_name
FROM orders;"
Mathematical Functions,
61. Round all product prices to 2 decimal places.,"SELECT product_id, product_name, ROUND(price, 2) AS rounded_price
FROM products;"
62. Find the square root of all product weights.,"SELECT product_id, product_name, weight, SQRT(weight) AS weight_square_root
FROM products;
"
63. Calculate the tax amount (price * 0.1) for each product.,"SELECT product_id, product_name, price, (price * 0.1) AS tax_amount
FROM products;
"
64. Find the absolute value of stock changes.,"SELECT product_id, product_name, stock_change, ABS(stock_change) AS absolute_stock_change
FROM products;
"
65. Get a random discount percentage between 5% and 20%.,"SELECT product_id, product_name, 
       ROUND(5 + (RAND() * (20 - 5)), 2) AS random_discount_percentage
FROM products;"
,
Advanced Intermediate SQL Problems,
EXISTS and NOT EXISTS,
66. Find employees who have at least one assigned project.,"SELECT e.employee_id, e.name
FROM employees e
INNER JOIN projects p ON e.employee_id = p.employee_id;"
67. Retrieve customers who have never placed an order.,"SELECT c.customer_id, c.name
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
WHERE o.order_id IS NULL;
"
68. Find departments with no employees.,"SELECT d.department_id, d.department_name
FROM departments d
LEFT JOIN employees e ON d.department_id = e.department_id
WHERE e.employee_id IS NULL;"
69. Get products that are currently not in stock.,"SELECT product_id, product_name
FROM products
WHERE stock_quantity = 0;"
70. Find suppliers that do not supply any product.,"SELECT s.supplier_id, s.supplier_name
FROM suppliers s
LEFT JOIN products p ON s.supplier_id = p.supplier_id
WHERE p.product_id IS NULL;"
UNION and UNION ALL,
"71. Combine customers from two different tables (e.g., retail_customers and","SELECT customer_id, name, email
FROM retail_customers
UNION
SELECT customer_id, name, email
FROM wholesale_customers;"
wholesale_customers).,
72. Retrieve employees and contractors as a single list.,"SELECT employee_id, name, 'Employee' AS role_type
FROM employees
UNION
SELECT contractor_id AS employee_id, name, 'Contractor"
73. Get a list of all unique cities from both customers and suppliers.,"SELECT city
FROM customers
UNION
SELECT city
FROM suppliers;"
74. Combine product names from two different product categories.,"SELECT product_name
FROM products
WHERE category = 'Electronics'
UNION
SELECT product_name
FROM products
WHERE category = 'Furniture';"
75. Retrieve orders from 2023 and 2024 as a single dataset.,"SELECT order_id, customer_id, order_date
FROM orders
WHERE YEAR(order_date) IN (2023, 2024);"
Common Table Expressions (CTEs),
"76. Create a CTE to list employees earning above 70,000.","WITH HighEarningEmployees AS (
    SELECT employee_id, name, salary
    FROM employees
    WHERE salary > 70000
)
SELECT * FROM HighEarningEmployees;"
77. Use a CTE to get the total sales per customer.,"WITH SalesPerCustomer AS (
    SELECT customer_id, SUM(total_amount) AS total_sales
    FROM orders
    GROUP BY customer_id
)
SELECT * FROM SalesPerCustomer;"
78. Create a recursive CTE to find an employee hierarchy.,"WITH RECURSIVE EmployeeHierarchy AS (
    -- Base case: Select top-level managers (employees with no manager)
    SELECT employee_id, name, manager_id
    FROM employees
    WHERE manager_id IS NULL
    
    UNION ALL
    
    -- Recursive case: Find employees reporting to a manager
    SELECT e.employee_id, e.name, e.manager_id
    FROM employees e
    JOIN EmployeeHierarchy eh ON e.manager_id = eh.employee_id
)
SELECT * FROM EmployeeHierarchy;"
79. Use a CTE to rank products by sales volume.,"WITH ProductSales AS (
    SELECT product_id, SUM(quantity_sold) AS total_quantity_sold
    FROM sales
    GROUP BY product_id
)
SELECT product_id, total_quantity_sold,
       RANK() OVER (ORDER BY total_quantity_sold DESC) AS sales_rank
FROM ProductSales;"
80. Retrieve all orders placed in the last 30 days using a CTE.,"WITH RecentOrders AS (
    SELECT order_id, customer_id, order_date
    FROM orders
    WHERE order_date >= CURDATE() - INTERVAL 30 DAY
)
SELECT * FROM RecentOrders;"
Window Functions,
81. Rank employees based on their salary using RANK().,"SELECT employee_id, name, salary,
       RANK() OVER (ORDER BY salary DESC) AS salary_rank
FROM employees;"
82. Use DENSE_RANK() to group employees by salary.,"SELECT employee_id, name, salary,
       DENSE_RANK() OVER (ORDER BY salary DESC) AS dense_salary_rank
FROM employees;"
83. Use ROW_NUMBER() to assign unique row numbers.,"SELECT employee_id, name, salary,
       ROW_NUMBER() OVER (ORDER BY salary DESC) AS row_num
FROM employees;"
84. Find the running total of sales by order date.,"SELECT order_id, order_date, total_amount,
       SUM(total_amount) OVER (ORDER BY order_date) AS running_total
FROM orders;"
85. Calculate the average salary per department using OVER().,"SELECT employee_id, name, department_id, salary,
       AVG(salary) OVER (PARTITION BY department_id) AS avg_salary_per_dept
FROM employees;"
Pivoting Data,
"86. Convert order statuses (Pending, Completed, Cancelled) into columns.","SELECT 
    order_id,
    customer_id,
    COUNT(CASE WHEN order_status = 'Pending' THEN 1 END) AS Pending,
    COUNT(CASE WHEN order_status = 'Completed' THEN 1 END) AS Completed,
    COUNT(CASE WHEN order_status = 'Cancelled' THEN 1 END) AS Cancelled
FROM orders
GROUP BY order_id, customer_id;"
87. Display monthly sales as separate columns.,"SELECT 
    customer_id,
    SUM(CASE WHEN EXTRACT(MONTH FROM order_date) = 1 THEN total_amount ELSE 0 END) AS Jan_sales,
    SUM(CASE WHEN EXTRACT(MONTH FROM order_date) = 2 THEN total_amount ELSE 0 END) AS Feb_sales,
    SUM(CASE WHEN EXTRACT(MONTH FROM order_date) = 3 THEN total_amount ELSE 0 END) AS Mar_sales,
    -- Add similar lines for other months
    SUM(CASE WHEN EXTRACT(MONTH FROM order_date) = 12 THEN total_amount ELSE 0 END) AS Dec_sales
FROM orders
GROUP BY customer_id;"
88. Pivot customer satisfaction ratings into percentages.,"SELECT 
    customer_id,
    COUNT(CASE WHEN rating = 1 THEN 1 END) * 100.0 / COUNT(*) AS rating_1_percent,
    COUNT(CASE WHEN rating = 2 THEN 1 END) * 100.0 / COUNT(*) AS rating_2_percent,
    COUNT(CASE WHEN rating = 3 THEN 1 END) * 100.0 / COUNT(*) AS rating_3_percent,
    COUNT(CASE WHEN rating = 4 THEN 1 END) * 100.0 / COUNT(*) AS rating_4_percent,
    COUNT(CASE WHEN rating = 5 THEN 1 END) * 100.0 / COUNT(*) AS rating_5_percent
FROM customer_ratings
GROUP BY customer_id;"
89. Convert employee job titles into a single column per department.,"SELECT 
    department_id,
    COUNT(CASE WHEN job_title = 'Manager' THEN 1 END) AS Managers,
    COUNT(CASE WHEN job_title = 'Developer' THEN 1 END) AS Developers,
    COUNT(CASE WHEN job_title = 'Sales' THEN 1 END) AS Sales
FROM employees
GROUP BY department_id;"
90. Show product sales data in a pivot format.,"SELECT 
    product_id,
    SUM(CASE WHEN EXTRACT(MONTH FROM order_date) = 1 THEN quantity_sold ELSE 0 END) AS Jan_sales,
    SUM(CASE WHEN EXTRACT(MONTH FROM order_date) = 2 THEN quantity_sold ELSE 0 END) AS Feb_sales,
    SUM(CASE WHEN EXTRACT(MONTH FROM order_date) = 3 THEN quantity_sold ELSE 0 END) AS Mar_sales,
    -- Add similar lines for other months
    SUM(CASE WHEN EXTRACT(MONTH FROM order_date) = 12 THEN quantity_sold ELSE 0 END) AS Dec_sales
FROM sales
GROUP BY product_id;"
Stored Procedures and Triggers,
91. Write a stored procedure to get employee details by department.,"DELIMITER $$

CREATE PROCEDURE GetEmployeeDetailsByDepartment(IN dept_id INT)
BEGIN
    SELECT employee_id, name, job_title, salary
    FROM employees
    WHERE department_id = dept_id"
92. Create a stored procedure to insert a new order.,"DELIMITER $$

CREATE PROCEDURE InsertNewOrder(
    IN p_customer_id INT,
    IN p_order_date DATE,
    IN p_total_amount DECIMAL(10, 2)
)
BEGIN
    INSERT INTO orders (customer_id, order_date, total_amount)
    VALUES (p_customer_id, p_order_date, p_total_amount);
END $$

DELIMITER ;"
93. Write a trigger to prevent deletion of employees with active projects.,"DELIMITER $$

CREATE TRIGGER PreventEmployeeDeletion
BEFORE DELETE ON employees
FOR EACH ROW
BEGIN
    DECLARE project_count INT;

    -- Count active projects for the employee being deleted
    SELECT COUNT(*)
    INTO project_count
    FROM projects
    WHERE employee_id = OLD.employee_id AND project_status = 'Active';

    -- If there are active projects, prevent deletion
    IF project_count > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Cannot delete employee with active projects.';
    END IF;
END $$

DELIMITER ;"
94. Create a trigger to update stock levels after an order is placed.,"DELIMITER $$

CREATE TRIGGER UpdateStockAfterOrder
AFTER INSERT ON orders
FOR EACH ROW
BEGIN
    DECLARE product_id INT;
    DECLARE quantity_ordered INT;

    -- Get product_id and quantity from the order items table (assuming there's an order_items table)
    DECLARE cur CURSOR FOR 
        SELECT product_id, quantity
        FROM order_items
        WHERE order_id = NEW.order_id;

    OPEN cur;
    FETCH cur INTO product_id, quantity_ordered;
    
    -- Loop through all order items and update stock levels
    WHILE FOUND DO
        UPDATE products
        SET stock_level = stock_level - quantity_ordered
        WHERE product_id = product_id;
        
        FETCH cur INTO product_id, quantity_ordered;
    END WHILE;
    
    CLOSE cur;
END $$

DELIMITER ;"
95. Write a stored procedure to increase salaries by 10% for managers.,"DELIMITER $$

CREATE PROCEDURE IncreaseSalariesForManagers()
BEGIN
    UPDATE employees
    SET salary = salary * 1.10
    WHERE job_title = 'Manager';
END $$

DELIMITER ;"
Indexes and Performance Optimization,
96. Create an index on the email column of the customers table.,"CREATE INDEX idx_email ON customers(email);
"
97. Analyze the execution time of a query using EXPLAIN.,"EXPLAIN SELECT * FROM customers WHERE email = 'example@example.com';
"
98. Optimize a slow query using indexing.,"CREATE INDEX idx_email ON customers(email);
"
99. Create a composite index on last_name and first_name.,"CREATE INDEX idx_lastname_firstname ON customers(last_name, first_name);"
100. Check the size of an index on the orders table.,SHOW INDEX FROM orders;
,
